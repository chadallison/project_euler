scale_color_manual(values = team_color_codes) +
geom_hline(aes(yintercept = mean(team_fir_metrics$total_fira)), linetype = "dashed", alpha = 0.5) +
geom_vline(aes(xintercept = mean(team_fir_metrics$total_fir)), linetype = "dashed", alpha = 0.5)
team_fir_metrics |>
left_join(team_abbrevs, by = "team") |>
ggplot(aes(total_fir, total_fira)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb)) +
scale_color_manual(values = team_color_codes) +
geom_hline(aes(yintercept = mean(team_fir_metrics$total_fira)), linetype = "dashed", alpha = 0.5) +
geom_vline(aes(xintercept = mean(team_fir_metrics$total_fir)), linetype = "dashed", alpha = 0.5) +
labs(x = "Total First Inning Runs Scored", y = "Total First Inning Runs Allowed",
title = "First Inning Performance")
team_fir_metrics |>
left_join(team_abbrevs, by = "team") |>
ggplot(aes(fir_rate, total_fir)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb)) +
scale_color_manual(values = team_color_codes) +
geom_line(stat = "smooth", formula = y ~ x, method = "lm", linetype = "dashed", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 1, by = 0.05), label = scales::percent) +
scale_y_continuous(breaks = seq(0, 100, by = 5)) +
labs(x = "First Inning Score Rate", y = "Total First Inning Runs Scored",
title = "First Innning Runs Scored v. Allowed")
team_fir_metrics |>
left_join(team_abbrevs, by = "team") |>
ggplot(aes(total_fir, total_fira)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb)) +
scale_color_manual(values = team_color_codes) +
geom_hline(aes(yintercept = mean(team_fir_metrics$total_fira)), linetype = "dashed", alpha = 0.5) +
geom_vline(aes(xintercept = mean(team_fir_metrics$total_fir)), linetype = "dashed", alpha = 0.5) +
labs(x = "Total First Inning Runs Scored", y = "Total First Inning Runs Allowed",
title = "First Inning Runs Scored v. Allowed")
team_fir_metrics |>
left_join(team_abbrevs, by = "team") |>
ggplot(aes(total_fir, total_fira)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb)) +
scale_color_manual(values = team_color_codes) +
geom_hline(aes(yintercept = mean(team_fir_metrics$total_fira)), linetype = "dashed", alpha = 0.5) +
geom_vline(aes(xintercept = mean(team_fir_metrics$total_fir)), linetype = "dashed", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 100, by = 5)) +
scale_y_continuous(breaks = seq(0, 100, by = 5)) +
labs(x = "Total First Inning Runs Scored", y = "Total First Inning Runs Allowed",
title = "First Inning Runs Scored v. Allowed")
team_fir_metrics |>
left_join(team_abbrevs, by = "team") |>
ggplot(aes(fir_rate, fira_rate)) +
geom_point(size = 4)
team_fir_metrics |>
left_join(team_abbrevs, by = "team") |>
ggplot(aes(fir_rate, fira_rate)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb)) +
scale_color_manual(values = team_color_codes)
team_fir_metrics |>
left_join(team_abbrevs, by = "team") |>
ggplot(aes(fir_rate, fira_rate)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb)) +
scale_color_manual(values = team_color_codes) +
geom_hline(aes(yintercept = mean(team_fir_metrics$fira_rate)), linetype = "dashed", alpha = 0.5) +
geom_vline(aes(xintercept = mean(team_fir_metrics$fir_rate)), linetype = "dashed", alpha = 0.5)
team_fir_metrics |>
left_join(team_abbrevs, by = "team") |>
ggplot(aes(fir_rate, fira_rate)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb)) +
scale_color_manual(values = team_color_codes) +
geom_hline(aes(yintercept = mean(team_fir_metrics$fira_rate)), linetype = "dashed", alpha = 0.5) +
geom_vline(aes(xintercept = mean(team_fir_metrics$fir_rate)), linetype = "dashed", alpha = 0.5) +
labs(x = "First Inning Score Rate", y = "First Inning Score Allowance Rate",
title = "Runs Scored v. Allowed Rate")
team_fir_metrics |>
left_join(team_abbrevs, by = "team") |>
ggplot(aes(fir_rate, fira_rate)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb)) +
scale_color_manual(values = team_color_codes) +
geom_hline(aes(yintercept = mean(team_fir_metrics$fira_rate)), linetype = "dashed", alpha = 0.5) +
geom_vline(aes(xintercept = mean(team_fir_metrics$fir_rate)), linetype = "dashed", alpha = 0.5) +
labs(x = "First Inning Score Rate", y = "First Inning Score Allowance Rate",
title = "First Inning Runs Scored v. Allowed Rate")
team_fir_metrics |>
left_join(team_abbrevs, by = "team") |>
ggplot(aes(fir_rate, fira_rate)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb)) +
scale_color_manual(values = team_color_codes) +
geom_hline(aes(yintercept = mean(team_fir_metrics$fira_rate)), linetype = "dashed", alpha = 0.5) +
geom_vline(aes(xintercept = mean(team_fir_metrics$fir_rate)), linetype = "dashed", alpha = 0.5) +
scale_x_continuous(labels = scales::percent) +
scale_y_continuous(labels = scale::percent) +
labs(x = "First Inning Score Rate", y = "First Inning Score Allowance Rate",
title = "First Inning Runs Scored v. Allowed Rate")
team_fir_metrics |>
left_join(team_abbrevs, by = "team") |>
ggplot(aes(fir_rate, fira_rate)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb)) +
scale_color_manual(values = team_color_codes) +
geom_hline(aes(yintercept = mean(team_fir_metrics$fira_rate)), linetype = "dashed", alpha = 0.5) +
geom_vline(aes(xintercept = mean(team_fir_metrics$fir_rate)), linetype = "dashed", alpha = 0.5) +
scale_x_continuous(labels = scales::percent) +
scale_y_continuous(labels = scales::percent) +
labs(x = "First Inning Score Rate", y = "First Inning Score Allowance Rate",
title = "First Inning Runs Scored v. Allowed Rate")
team_fir_metrics |>
left_join(team_abbrevs, by = "team") |>
ggplot(aes(fir_rate, total_fir)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb)) +
scale_color_manual(values = team_color_codes) +
geom_line(stat = "smooth", formula = y ~ x, method = "lm", linetype = "dashed", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 1, by = 0.05), label = scales::percent) +
scale_y_continuous(breaks = seq(0, 100, by = 5)) +
labs(x = "First Inning Score Rate", y = "Total First Inning Runs Scored",
title = "Which teams are scoring the most in the first inning?")
team_fir_metrics |>
left_join(team_abbrevs, by = "team") |>
ggplot(aes(fir_rate, total_fir)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb)) +
scale_color_manual(values = team_color_codes) +
geom_line(stat = "smooth", formula = y ~ x, method = "lm", linetype = "dashed", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 1, by = 0.025), label = scales::percent) +
scale_y_continuous(breaks = seq(0, 100, by = 5)) +
labs(x = "First Inning Score Rate", y = "Total First Inning Runs Scored",
title = "Which teams are scoring the most in the first inning?")
scale_x_continuous(breaks = seq(0, 1, by = 0.025, labels = scales::percent) +
team_fir_metrics |>
left_join(team_abbrevs, by = "team") |>
ggplot(aes(fir_rate, fira_rate)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb)) +
scale_color_manual(values = team_color_codes) +
geom_hline(aes(yintercept = mean(team_fir_metrics$fira_rate)), linetype = "dashed", alpha = 0.5) +
geom_vline(aes(xintercept = mean(team_fir_metrics$fir_rate)), linetype = "dashed", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 1, by = 0.025), labels = scales::percent) +
scale_y_continuous(labels = scales::percent) +
labs(x = "First Inning Score Rate", y = "First Inning Score Allowance Rate",
title = "First Inning Runs Scored v. Allowed Rate")
team_fir_metrics |>
team_fir_metrics |>
left_join(team_abbrevs, by = "team") |>
ggplot(aes(fir_rate, fira_rate)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb)) +
scale_color_manual(values = team_color_codes) +
geom_hline(aes(yintercept = mean(team_fir_metrics$fira_rate)), linetype = "dashed", alpha = 0.5) +
geom_vline(aes(xintercept = mean(team_fir_metrics$fir_rate)), linetype = "dashed", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 1, by = 0.025), labels = scales::percent) +
scale_y_continuous(labels = scales::percent) +
labs(x = "First Inning Score Rate", y = "First Inning Score Allowance Rate",
title = "First Inning Runs Scored v. Allowed Rate")
team_fir_metrics |>
left_join(team_abbrevs, by = "team") |>
ggplot(aes(fir_rate, fira_rate)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb)) +
scale_color_manual(values = team_color_codes) +
geom_hline(aes(yintercept = mean(team_fir_metrics$fira_rate)), linetype = "dashed", alpha = 0.5) +
geom_vline(aes(xintercept = mean(team_fir_metrics$fir_rate)), linetype = "dashed", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 1, by = 0.025), labels = scales::percent) +
scale_y_continuous(breaks = seq(0, 1, by = 0.025), labels = scales::percent) +
labs(x = "First Inning Score Rate", y = "First Inning Score Allowance Rate",
title = "First Inning Runs Scored v. Allowed Rate")
all_fir = read_csv("first_inning_runs.csv")
get_home_first_inning_runs = function(fpk) {
return(mlb_pbp(fpk) |>
filter(about.inning == 1 & !is.na(details.homeScore)) |>
summarise(home_score = max(details.homeScore)) |>
pull(home_score))
}
get_away_first_inning_runs = function(fpk) {
return(mlb_pbp(fpk) |>
filter(about.inning == 1 & !is.na(details.awayScore)) |>
summarise(away_score = max(details.awayScore)) |>
pull(away_score))
}
new_fir = all_game_pks |>
filter(!game_pk %in% bad_pks & !game_pk %in% all_fir$game_pk) |>
mutate(home_fir = sapply(game_pk, get_home_first_inning_runs),
away_fir = sapply(game_pk, get_away_first_inning_runs))
all_fir = rbind(all_fir, new_fir)
write_csv(all_fir, "first_inning_runs.csv")
get_total_fir = function(team) {
home_fir = all_fir |> filter(home_team == team) |> pull(home_fir)
away_fir = all_fir |> filter(away_team == team) |> pull(away_fir)
return(sum(c(home_fir, away_fir)))
}
get_total_fira = function(team) {
home_fir = all_fir |> filter(home_team == team) |> pull(away_fir)
away_fir = all_fir |> filter(away_team == team) |> pull(home_fir)
return(sum(c(home_fir, away_fir)))
}
get_fir_rate = function(team) {
home_fir = all_fir |> filter(home_team == team) |> mutate(fir = ifelse(home_fir > 0, 1, 0)) |> pull(fir)
away_fir = all_fir |> filter(away_team == team) |> mutate(fir = ifelse(away_fir > 0, 1, 0)) |> pull(fir)
return(round(mean(c(home_fir, away_fir)), 3))
}
get_fira_rate = function(team) {
home_fir = all_fir |> filter(home_team == team) |> mutate(fir = ifelse(away_fir > 0, 1, 0)) |> pull(fir)
away_fir = all_fir |> filter(away_team == team) |> mutate(fir = ifelse(home_fir > 0, 1, 0)) |> pull(fir)
return(round(mean(c(home_fir, away_fir)), 3))
}
team_fir_metrics = data.frame(team = all_teams) |>
mutate(total_fir = sapply(team, get_total_fir),
total_fira = sapply(team, get_total_fira),
fir_rate = sapply(team, get_fir_rate),
fira_rate = sapply(team, get_fira_rate))
team_fir_metrics |>
left_join(team_abbrevs, by = "team") |>
ggplot(aes(total_fir, total_fira)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb)) +
scale_color_manual(values = team_color_codes) +
geom_hline(aes(yintercept = mean(team_fir_metrics$total_fira)), linetype = "dashed", alpha = 0.5) +
geom_vline(aes(xintercept = mean(team_fir_metrics$total_fir)), linetype = "dashed", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 100, by = 5)) +
scale_y_continuous(breaks = seq(0, 100, by = 5)) +
labs(x = "Total First Inning Runs Scored", y = "Total First Inning Runs Allowed",
title = "First Inning Runs Scored v. Allowed")
team_fir_metrics |>
left_join(team_abbrevs, by = "team") |>
ggplot(aes(fir_rate, fira_rate)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb)) +
scale_color_manual(values = team_color_codes) +
geom_hline(aes(yintercept = mean(team_fir_metrics$fira_rate)), linetype = "dashed", alpha = 0.5) +
geom_vline(aes(xintercept = mean(team_fir_metrics$fir_rate)), linetype = "dashed", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 1, by = 0.025), labels = scales::percent) +
scale_y_continuous(breaks = seq(0, 1, by = 0.025), labels = scales::percent) +
labs(x = "First Inning Score Rate", y = "First Inning Score Allowance Rate",
title = "First Inning Runs Scored v. Allowed Rate")
team_fir_metrics |>
left_join(team_abbrevs, by = "team") |>
ggplot(aes(fir_rate, total_fir)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb)) +
scale_color_manual(values = team_color_codes) +
geom_line(stat = "smooth", formula = y ~ x, method = "lm", linetype = "dashed", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 1, by = 0.025), label = scales::percent) +
scale_y_continuous(breaks = seq(0, 100, by = 5)) +
labs(x = "First Inning Score Rate", y = "Total First Inning Runs Scored",
title = "Which teams are scoring the most in the first inning?")
team_fir_metrics |>
left_join(team_abbrevs, by = "team")
team_fir_metrics |>
left_join(team_abbrevs, by = "team") |>
filter(abb %in% c("COL", "NYY"))
team_fir_metrics |>
left_join(team_abbrevs, by = "team") |>
ggplot(aes(fir_rate, fira_rate)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb)) +
scale_color_manual(values = team_color_codes) +
geom_hline(aes(yintercept = mean(team_fir_metrics$fira_rate)), linetype = "dashed", alpha = 0.5) +
geom_vline(aes(xintercept = mean(team_fir_metrics$fir_rate)), linetype = "dashed", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 1, by = 0.025), labels = scales::percent) +
scale_y_continuous(breaks = seq(0, 1, by = 0.025), labels = scales::percent) +
labs(x = "First Inning Score Rate", y = "First Inning Score Allowance Rate",
title = "First Inning Runs Scored v. Allowed Rate")
(1 - 0.219) * (1 - 0.160)
1 - (1 - 0.219) * (1 - 0.160)
(1 - 0.198) * (1 - 0.200)
1 - (1 - 0.198) * (1 - 0.200)
1 - (1 - 0.219) * (1 - 0.160)
1 - (1 - 0.198) * (1 - 0.200)
1 - ((1 - 0.219) * (1 - 0.160))
1 - (1 - 0.219) * (1 - 0.160)
1 - (1 - 0.219) * (1 - 0.160)
1 - (1 - 0.198) * (1 - 0.200)
(1 - 0.219) * (1 - 0.16)
team_fir_metrics |>
left_join(team_abbrevs, by = "team") |>
ggplot(aes(fir_rate, total_fir)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb)) +
scale_color_manual(values = team_color_codes) +
geom_line(stat = "smooth", formula = y ~ x, method = "lm", linetype = "dashed", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 1, by = 0.025), label = scales::percent) +
scale_y_continuous(breaks = seq(0, 100, by = 5)) +
labs(x = "First Inning Score Rate", y = "Total First Inning Runs Scored",
title = "Which teams are scoring the most in the first inning?")
team_fir_metrics |>
left_join(team_abbrevs, by = "team") |>
ggplot(aes(total_fir, total_fira)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb)) +
scale_color_manual(values = team_color_codes) +
geom_hline(aes(yintercept = mean(team_fir_metrics$total_fira)), linetype = "dashed", alpha = 0.5) +
geom_vline(aes(xintercept = mean(team_fir_metrics$total_fir)), linetype = "dashed", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 100, by = 5)) +
scale_y_continuous(breaks = seq(0, 100, by = 5)) +
labs(x = "Total First Inning Runs Scored", y = "Total First Inning Runs Allowed",
title = "First Inning Runs Scored v. Allowed")
team_fir_metrics |>
left_join(team_abbrevs, by = "team") |>
ggplot(aes(total_fir, total_fira)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb)) +
scale_color_manual(values = team_color_codes) +
geom_hline(aes(yintercept = mean(team_fir_metrics$total_fira)), linetype = "dashed", alpha = 0.5) +
geom_vline(aes(xintercept = mean(team_fir_metrics$total_fir)), linetype = "dashed", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 100, by = 5)) +
scale_y_continuous(breaks = seq(0, 100, by = 5)) +
labs(x = "Total First Inning Runs Scored", y = "Total First Inning Runs Allowed",
title = "First Inning Runs Scored v. Allowed")
team_fir_metrics |>
left_join(team_abbrevs, by = "team") |>
ggplot(aes(fir_rate, total_fir)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb)) +
scale_color_manual(values = team_color_codes) +
geom_line(stat = "smooth", formula = y ~ x, method = "lm", linetype = "dashed", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 1, by = 0.025), label = scales::percent) +
scale_y_continuous(breaks = seq(0, 100, by = 5)) +
labs(x = "First Inning Score Rate", y = "Total First Inning Runs Scored",
title = "Which teams are scoring the most in the first inning?")
# function to check if a number is prime
is_prime = function(n) {
if (n <= 1) return(FALSE)
if (n <= 3) return(TRUE)
if (n %% 2 == 0 | n %% 3 == 0) return(FALSE)
i = 5
while (i * i <= n) {
if (n %% i == 0 | n %% (i + 2) == 0) return(FALSE)
i = i + 6
}
return(TRUE)
}
# function to generate all rotations of a number
generate_rotations = function(n) {
digits = as.character(n)
num_rotations = nchar(digits)
rotations = vector("numeric", length = num_rotations)
for (i in 1:num_rotations) {
rotations[i] = as.numeric(paste0(substr(digits, i, num_rotations), substr(digits, 1, i - 1)))
}
return(rotations)
}
# function to count circular primes below a given limit
count_circular_primes = function(limit) {
circular_primes = c()
for (num in 2:limit) {
if (is_prime(num)) {
rotations = generate_rotations(num)
if (all(sapply(rotations, is_prime))) {
circular_primes = c(circular_primes, num)
}
}
}
return(length(circular_primes))
}
# calculate the number of circular primes below one million
limit = 1000000
count_circular_primes(limit)
# function to check if a number is prime
is_prime = function(n) {
if (n <= 1) return(FALSE)
if (n <= 3) return(TRUE)
if (n %% 2 == 0 | n %% 3 == 0) return(FALSE)
i = 5
while (i * i <= n) {
if (n %% i == 0 | n %% (i + 2) == 0) return(FALSE)
i = i + 6
}
return(TRUE)
}
# function to generate all rotations of a number
generate_rotations = function(n) {
digits = as.character(n)
num_rotations = nchar(digits)
rotations = vector("numeric", length = num_rotations)
for (i in 1:num_rotations) {
rotations[i] = as.numeric(paste0(substr(digits, i, num_rotations), substr(digits, 1, i - 1)))
}
return(rotations)
}
# function to count circular primes below a given limit
count_circular_primes = function(limit) {
circular_primes = c()
for (num in 2:limit) {
if (is_prime(num)) {
rotations = generate_rotations(num)
if (all(sapply(rotations, is_prime))) {
circular_primes = c(circular_primes, num)
}
}
}
return(length(circular_primes))
}
# calculate the number of circular primes below one million
limit = 1000000
count_circular_primes(limit)
# Function to generate all primes up to a given limit using Sieve of Eratosthenes
generate_primes = function(limit) {
primes = rep(TRUE, limit + 1)
primes[1:2] = FALSE
p = 2
while (p * p <= limit) {
if (primes[p]) {
primes[p * p:limit:p] = FALSE
}
p = p + 1
}
return(which(primes))
}
# Check if a number and its rotations are prime
are_rotations_primes = function(n, primes) {
digits = as.character(n)
num_rotations = nchar(digits)
for (i in 1:num_rotations) {
rotation = as.numeric(paste0(substr(digits, i, num_rotations), substr(digits, 1, i - 1)))
if (!primes[rotation]) {
return(FALSE)
}
}
return(TRUE)
}
# Function to count circular primes below a given limit
count_circular_primes = function(limit) {
primes = generate_primes(limit)
circular_primes = c()
for (num in primes) {
if (are_rotations_primes(num, primes)) {
circular_primes = c(circular_primes, num)
}
}
return(length(circular_primes))
}
# Calculate the number of circular primes below one million
limit = 1000000
count_circular_primes(limit)
# function to check if a number is prime
is_prime = function(n) {
if (n <= 1) return(FALSE)
if (n <= 3) return(TRUE)
if (n %% 2 == 0 | n %% 3 == 0) return(FALSE)
i = 5
while (i * i <= n) {
if (n %% i == 0 | n %% (i + 2) == 0) return(FALSE)
i = i + 6
}
return(TRUE)
}
# function to generate all rotations of a number
generate_rotations = function(n) {
digits = as.character(n)
num_rotations = nchar(digits)
rotations = vector("numeric", length = num_rotations)
for (i in 1:num_rotations) {
rotations[i] = as.numeric(paste0(substr(digits, i, num_rotations), substr(digits, 1, i - 1)))
}
return(rotations)
}
# function to count circular primes below a given limit
count_circular_primes = function(limit) {
circular_primes = c()
for (num in 2:limit) {
if (is_prime(num)) {
rotations = generate_rotations(num)
if (all(sapply(rotations, is_prime))) {
circular_primes = c(circular_primes, num)
}
}
}
return(length(circular_primes))
}
# calculate the number of circular primes below one million
limit = 100000
count_circular_primes(limit)
# function to check if a number is prime
is_prime = function(n) {
if (n <= 1) return(FALSE)
if (n <= 3) return(TRUE)
if (n %% 2 == 0 | n %% 3 == 0) return(FALSE)
i = 5
while (i * i <= n) {
if (n %% i == 0 | n %% (i + 2) == 0) return(FALSE)
i = i + 6
}
return(TRUE)
}
# function to generate all rotations of a number
generate_rotations = function(n) {
digits = as.character(n)
num_rotations = nchar(digits)
rotations = vector("numeric", length = num_rotations)
for (i in 1:num_rotations) {
rotations[i] = as.numeric(paste0(substr(digits, i, num_rotations), substr(digits, 1, i - 1)))
}
return(rotations)
}
# function to count circular primes below a given limit
count_circular_primes = function(limit) {
circular_primes = c()
for (num in 2:limit) {
if (is_prime(num)) {
rotations = generate_rotations(num)
if (all(sapply(rotations, is_prime))) {
circular_primes = c(circular_primes, num)
}
}
}
return(length(circular_primes))
}
# calculate the number of circular primes below one million
count_circular_primes(1e6)
setwd("~/r_projects/project_euler/problem 35 - circular primes")
