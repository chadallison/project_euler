select(-shared) |>
rowwise() |>
mutate(new_x = remove_shared_digit_x(x, y),
new_y = remove_shared_digit_y(x, y)) |>
ungroup() |>
filter(x / y == new_x / new_y) |>
select(x, y)
crossing(x = 10:99, y = 10:99) |>
filter(x < y & !(substr(x, 2, 2) == 0 & substr(y, 2, 2) == 0)) |>
rowwise() |>
mutate(shared = has_shared_digit(x, y)) |>
ungroup() |>
filter(shared) |>
select(-shared) |>
rowwise() |>
mutate(new_x = remove_shared_digit_x(x, y),
new_y = remove_shared_digit_y(x, y)) |>
ungroup() |>
filter(x / y == new_x / new_y) |>
transmute(pair = paste0(x, "/", y))
crossing(x = 10:99, y = 10:99) |>
filter(x < y & !(substr(x, 2, 2) == 0 & substr(y, 2, 2) == 0)) |>
rowwise() |>
mutate(shared = has_shared_digit(x, y)) |>
ungroup() |>
filter(shared) |>
select(-shared) |>
rowwise() |>
mutate(new_x = remove_shared_digit_x(x, y),
new_y = remove_shared_digit_y(x, y)) |>
ungroup() |>
filter(x / y == new_x / new_y) |>
transmute(pair = paste0(x, "/", y)) |>
pull(pair)
16 * 19 * 26 * 49
64 * 95 * 65 * 98
(16 * 19 * 26 * 49) / (64 * 95 * 65 * 98)
(16 * 19 * 26 * 49) / (64 * 95 * 65 * 98)
crossing(x = 10:99, y = 10:99) |>
filter(x < y & !(substr(x, 2, 2) == 0 & substr(y, 2, 2) == 0)) |>
rowwise() |>
mutate(shared = has_shared_digit(x, y)) |>
ungroup() |>
filter(shared) |>
select(-shared) |>
rowwise() |>
mutate(new_x = remove_shared_digit_x(x, y),
new_y = remove_shared_digit_y(x, y)) |>
ungroup() |>
filter(x / y == new_x / new_y)
FRACTION::fra(0.5)
crossing(x = 10:99, y = 10:99) |>
filter(x < y & !(substr(x, 2, 2) == 0 & substr(y, 2, 2) == 0)) |>
rowwise() |>
mutate(shared = has_shared_digit(x, y)) |>
ungroup() |>
filter(shared) |>
select(-shared) |>
rowwise() |>
mutate(new_x = remove_shared_digit_x(x, y),
new_y = remove_shared_digit_y(x, y)) |>
ungroup() |>
filter(x / y == new_x / new_y)
library(FRACTION)
fra(0.5)
crossing(x = 10:99, y = 10:99) |>
filter(x < y & !(substr(x, 2, 2) == 0 & substr(y, 2, 2) == 0)) |>
rowwise() |>
mutate(shared = has_shared_digit(x, y)) |>
ungroup() |>
filter(shared) |>
select(-shared) |>
rowwise() |>
mutate(new_x = remove_shared_digit_x(x, y),
new_y = remove_shared_digit_y(x, y)) |>
ungroup() |>
filter(x / y == new_x / new_y)
fra((16 / 64) * (19 / 95) * (26 / 65) * (49 / 98))
fra((16 / 64) * (19 / 95) * (26 / 65) * (49 / 98))
paste0("final simplified fraction: ", fra((16 / 64) * (19 / 95) * (26 / 65) * (49 / 98)))
has_shared_digit = function(x, y) {
xd = as.numeric(str_split(x, "")[[1]])
yd = as.numeric(str_split(y, "")[[1]])
if (length(intersect(xd, yd) > 0)) return(T) else return(F)
}
remove_shared_digit_x = function(x, y) {
if (substr(x, 1, 1) == substr(y, 1, 1)) return(as.numeric(substr(x, 2, 2)))
if (substr(x, 1, 1) == substr(y, 2, 2)) return(as.numeric(substr(x, 2, 2)))
if (substr(x, 2, 2) == substr(y, 1, 1)) return(as.numeric(substr(x, 1, 1)))
if (substr(x, 2, 2) == substr(y, 2, 2)) return(as.numeric(substr(x, 1, 1)))
}
remove_shared_digit_y = function(x, y) {
if (substr(x, 1, 1) == substr(y, 1, 1)) return(as.numeric(substr(y, 2, 2)))
if (substr(x, 1, 1) == substr(y, 2, 2)) return(as.numeric(substr(y, 1, 1)))
if (substr(x, 2, 2) == substr(y, 1, 1)) return(as.numeric(substr(y, 2, 2)))
if (substr(x, 2, 2) == substr(y, 2, 2)) return(as.numeric(substr(y, 1, 1)))
}
crossing(x = 10:99, y = 10:99) |>
filter(x < y & !(substr(x, 2, 2) == 0 & substr(y, 2, 2) == 0)) |>
rowwise() |>
mutate(shared = has_shared_digit(x, y)) |>
ungroup() |>
filter(shared) |>
select(-shared) |>
rowwise() |>
mutate(new_x = remove_shared_digit_x(x, y),
new_y = remove_shared_digit_y(x, y)) |>
ungroup() |>
filter(x / y == new_x / new_y)
paste0("final simplified fraction: ", fra((16 / 64) * (19 / 95) * (26 / 65) * (49 / 98)))
has_shared_digit = function(x, y) {
xd = as.numeric(str_split(x, "")[[1]])
yd = as.numeric(str_split(y, "")[[1]])
if (length(intersect(xd, yd) > 0)) return(T) else return(F)
}
remove_shared_digit_x = function(x, y) {
if (substr(x, 1, 1) == substr(y, 1, 1)) return(as.numeric(substr(x, 2, 2)))
if (substr(x, 1, 1) == substr(y, 2, 2)) return(as.numeric(substr(x, 2, 2)))
if (substr(x, 2, 2) == substr(y, 1, 1)) return(as.numeric(substr(x, 1, 1)))
if (substr(x, 2, 2) == substr(y, 2, 2)) return(as.numeric(substr(x, 1, 1)))
}
remove_shared_digit_y = function(x, y) {
if (substr(x, 1, 1) == substr(y, 1, 1)) return(as.numeric(substr(y, 2, 2)))
if (substr(x, 1, 1) == substr(y, 2, 2)) return(as.numeric(substr(y, 1, 1)))
if (substr(x, 2, 2) == substr(y, 1, 1)) return(as.numeric(substr(y, 2, 2)))
if (substr(x, 2, 2) == substr(y, 2, 2)) return(as.numeric(substr(y, 1, 1)))
}
crossing(x = 10:99, y = 10:99) |>
filter(x < y & !(substr(x, 2, 2) == 0 & substr(y, 2, 2) == 0)) |>
rowwise() |>
mutate(shared = has_shared_digit(x, y)) |>
ungroup() |>
filter(shared) |>
select(-shared) |>
rowwise() |>
mutate(new_x = remove_shared_digit_x(x, y),
new_y = remove_shared_digit_y(x, y)) |>
ungroup() |>
filter(x / y == new_x / new_y)
is_prime = function(num) {
if (num == 2) {
return(T)
} else if (any(num %% 2:(num - 1) == 0)) {
return(F)
} else {
return(T)
}
}
is_prime(27)
is_prime(37)
data.frame(num = 1:1000000)
is_prime = function(num) {
if (num == 2) {
return(T)
} else if (any(num %% 2:(num - 1) == 0)) {
return(F)
} else {
return(T)
}
}
data.frame(num = 1:1000000) |>
mutate(is_prime = sapply(num, is_prime))
is.prime = function(n) n == 2L || all(n %% 2L:ceiling(sqrt(n)) != 0)
is.prime = function(n) n == 2L || all(n %% 2L:ceiling(sqrt(n)) != 0)
data.frame(num = 1:1000) |>
mutate(is_prime = sapply(num, is.prime))
data.frame(num = 1:10000) |>
mutate(is_prime = sapply(num, is.prime))
data.frame(num = 1:100000) |>
mutate(is_prime = sapply(num, is.prime))
data.frame(num = 1:1000000) |>
mutate(is_prime = sapply(num, is.prime))
2L
24L
data.frame(num = 1:1000000) |>
mutate(is_prime = sapply(num, is_prime))
data.frame(num = 1:10000) |>
mutate(is_prime = sapply(num, is_prime))
data.frame(num = 1:10000) |>
mutate(is_prime = sapply(num, is_prime)) |>
filter(is_prime)
data.frame(num = 1:10000) |>
filter(num %% 2 == 0)
data.frame(num = 1:10000) |>
filter(num %% 2 != 0)
data.frame(num = 1:1000000) |>
filter(num %% 2 != 0)
data.frame(num = 1:1000000) |>
filter(num %% 2 != 0 & num %% 3 != 0)
data.frame(num = 1:1000000) |>
filter(num %% 2 != 0 & num %% 3 != 0) |>
mutate(is_prime = sapply(num, is_prime))
sieve <- function(n)
{
n <- as.integer(n)
if(n > 1e8) stop("n too large")
primes <- rep(TRUE, n)
primes[1] <- FALSE
last.prime <- 2L
fsqr <- floor(sqrt(n))
while (last.prime <= fsqr)
{
primes[seq.int(2L*last.prime, n, last.prime)] <- FALSE
sel <- which(primes[(last.prime+1):(fsqr+1)])
if(any(sel)){
last.prime <- last.prime + min(sel)
}else last.prime <- fsqr+1
}
which(primes)
}
sieve(100)
sieve(10000)
sieve = function(n) {
n = as.integer(n)
if (n > 1e8) stop("n too large")
primes = rep(T, n)
primes[1] = F
last.prime = 2L
fsqr = floor(sqrt(n))
while (last.prime <= fsqr) {
primes[seq.int(2L * last.prime, n, last.prime)] = F
sel = which(primes[(last.prime + 1):(fsqr + 1)])
if (any(sel)) {
last.prime = last_prime + min(sel)
} else {
last.prime = fsqr + 1
}
}
which(primes)
}
sieve(10000)
last.prime = last.prime + min(sel)
sieve = function(n) {
n = as.integer(n)
if (n > 1e8) stop("n too large")
primes = rep(T, n)
primes[1] = F
last.prime = 2L
fsqr = floor(sqrt(n))
while (last.prime <= fsqr) {
primes[seq.int(2L * last.prime, n, last.prime)] = F
sel = which(primes[(last.prime + 1):(fsqr + 1)])
if (any(sel)) {
last.prime = last.prime + min(sel)
} else {
last.prime = fsqr + 1
}
}
which(primes)
}
sieve(10000)
sieve = function(n) {
n = as.integer(n)
if (n > 1e8) stop("n too large")
primes = rep(T, n)
primes[1] = F
last.prime = 2L
fsqr = floor(sqrt(n))
while (last.prime <= fsqr) {
primes[seq.int(2L * last.prime, n, last.prime)] = F
sel = which(primes[(last.prime + 1):(fsqr + 1)])
if (any(sel)) {
last.prime = last.prime + min(sel)
} else {
last.prime = fsqr + 1
}
}
which(primes)
}
sieve(100000)
sieve = function(n) {
n = as.integer(n)
if (n > 1e8) stop("n too large")
primes = rep(T, n)
primes[1] = F
last.prime = 2L
fsqr = floor(sqrt(n))
while (last.prime <= fsqr) {
primes[seq.int(2L * last.prime, n, last.prime)] = F
sel = which(primes[(last.prime + 1):(fsqr + 1)])
if (any(sel)) {
last.prime = last.prime + min(sel)
} else {
last.prime = fsqr + 1
}
}
which(primes)
}
sieve(1000000)
data.frame(num = sieve(1000000))
1e6
1e6 == 1000000
data.frame(num = sieve(1e19))
sieve = function(n) {
n = as.integer(n)
if (n > 1e8) stop("n too large")
primes = rep(T, n)
primes[1] = F
last.prime = 2L
fsqr = floor(sqrt(n))
while (last.prime <= fsqr) {
primes[seq.int(2L * last.prime, n, last.prime)] = F
sel = which(primes[(last.prime + 1):(fsqr + 1)])
if (any(sel)) {
last.prime = last.prime + min(sel)
} else {
last.prime = fsqr + 1
}
}
which(primes)
}
data.frame(num = sieve(1e19))
sieve(1e33)
sieve(1e3)
sieve = function(n) {
n = as.integer(n)
if (n > 1e8) stop("n too large")
primes = rep(T, n)
primes[1] = F
last.prime = 2L
fsqr = floor(sqrt(n))
while (last.prime <= fsqr) {
primes[seq.int(2L * last.prime, n, last.prime)] = F
sel = which(primes[(last.prime + 1):(fsqr + 1)])
if (any(sel)) {
last.prime = last.prime + min(sel)
} else {
last.prime = fsqr + 1
}
}
which(primes)
}
data.frame(num = sieve(1e6))
sieve = function(n) {
n = as.integer(n)
primes = rep(T, n)
primes[1] = F
last.prime = 2L
fsqr = floor(sqrt(n))
while (last.prime <= fsqr) {
primes[seq.int(2L * last.prime, n, last.prime)] = F
sel = which(primes[(last.prime + 1):(fsqr + 1)])
if (any(sel)) {
last.prime = last.prime + min(sel)
} else {
last.prime = fsqr + 1
}
}
which(primes)
}
data.frame(num = sieve(1e6))
sieve(100)
sieve(7)
sieve(9)
sieve(11)
data.frame(num = sieve(1e6))
# function to generate all primes up to n
sieve = function(n) {
n = as.integer(n)
primes = rep(T, n)
primes[1] = F
last.prime = 2L
fsqr = floor(sqrt(n))
while (last.prime <= fsqr) {
primes[seq.int(2L * last.prime, n, last.prime)] = F
sel = which(primes[(last.prime + 1):(fsqr + 1)])
if (any(sel)) {
last.prime = last.prime + min(sel)
} else {
last.prime = fsqr + 1
}
}
which(primes)
}
data.frame(num = sieve(1e6))
# function to generate all primes up to n
sieve = function(n) {
n = as.integer(n)
primes = rep(T, n)
primes[1] = F
last.prime = 2L
fsqr = floor(sqrt(n))
while (last.prime <= fsqr) {
primes[seq.int(2L * last.prime, n, last.prime)] = F
sel = which(primes[(last.prime + 1):(fsqr + 1)])
if (any(sel)) {
last.prime = last.prime + min(sel)
} else {
last.prime = fsqr + 1
}
}
which(primes)
}
data.frame(number = sieve(1e6))
# function to generate all primes up to n
sieve = function(n) {
n = as.integer(n)
primes = rep(T, n)
primes[1] = F
last.prime = 2L
fsqr = floor(sqrt(n))
while (last.prime <= fsqr) {
primes[seq.int(2L * last.prime, n, last.prime)] = F
sel = which(primes[(last.prime + 1):(fsqr + 1)])
if (any(sel)) {
last.prime = last.prime + min(sel)
} else {
last.prime = fsqr + 1
}
}
which(primes)
}
data.frame(number = sieve(1e6))
# function to reverse number
rev(37)
# function to reverse number
rev.default(34)
# function to reverse number
rev_num = function(n) {
if (nchar(n) == 1) return(n)
digits = str_split(n, "")[[1]]
new_n = ""
for (i in nchar(n):1) new_n = paste0(new_n, digits[i])
return(rev_num)
}
rev_num(34)
# function to reverse number
rev_num = function(n) {
if (nchar(n) == 1) return(n)
digits = str_split(n, "")[[1]]
new_n = ""
for (i in nchar(n):1) new_n = paste0(new_n, digits[i])
return(rev_num)
}
rev_num(34)
# function to reverse number
rev_num = function(n) {
if (nchar(n) == 1) return(n)
digits = str_split(n, "")[[1]]
new_n = ""
for (i in nchar(n):1) new_n = paste0(new_n, digits[i])
return(new_n)
}
rev_num(34)
# function to reverse number
rev_num = function(n) {
if (nchar(n) == 1) return(n)
digits = str_split(n, "")[[1]]
new_n = ""
for (i in nchar(n):1) new_n = paste0(new_n, digits[i])
return(as.numeric(new_n))
}
rev_num(34)
rev_num(3444)
rev_num(320)
data.frame(number = sieve(1e6))
data.frame(number = sieve(1e6)) |>
mutate(num2 = sapply(number, rev_n))
data.frame(number = sieve(1e6)) |>
mutate(num2 = sapply(number, rev_num))
# function to check if a number is prime
is_prime = function(n) {
n == 2L | all(n %% 2L:max(2,floor(sqrt(n))) != 0)
}
is_prime(7)
# function to check if a number is prime
is_prime = function(n) {
return(n == 2L | all(n %% 2L:max(2,floor(sqrt(n))) != 0))
}
is_prime(7)
is_prime(37)
is_prime(33)
# function to check if a number is prime
is_prime = function(n) {
return(n == 2L | all(n %% 2L:max(2,floor(sqrt(n))) != 0))
}
data.frame(number = sieve(1e5)) |>
mutate(num2 = sapply(number, rev_num))
# function to generate all primes up to n
sieve = function(n) {
n = as.integer(n)
primes = rep(T, n)
primes[1] = F
last.prime = 2L
fsqr = floor(sqrt(n))
while (last.prime <= fsqr) {
primes[seq.int(2L * last.prime, n, last.prime)] = F
sel = which(primes[(last.prime + 1):(fsqr + 1)])
if (any(sel)) {
last.prime = last.prime + min(sel)
} else {
last.prime = fsqr + 1
}
}
which(primes)
}
# function to reverse number
rev_num = function(n) {
if (nchar(n) == 1) return(n)
digits = str_split(n, "")[[1]]
new_n = ""
for (i in nchar(n):1) new_n = paste0(new_n, digits[i])
return(as.numeric(new_n))
}
# function to check if a number is prime
is_prime = function(n) {
return(n == 2L | all(n %% 2L:max(2,floor(sqrt(n))) != 0))
}
data.frame(number = sieve(1e5)) |>
mutate(num2 = sapply(number, rev_num),
num3 = sapply(num2, is_prime)) |>
filter(num3)
